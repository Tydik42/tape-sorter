name: C++ CI/CD

on:
  push:
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/composite-actions/install-dependencies
        with:
          os: 'linux'
          install-linters: 'true'

      - name: Run clang-format
        run: |
          find core -name "*.h" -o -name "*.cpp" | xargs clang-format --dry-run --Werror
          clang-format --dry-run --Werror main.cpp

      - name: Run clang-tidy
        run: |
          mkdir -p build && cd build
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          cd ..
          run-clang-tidy -p build

  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/composite-actions/install-dependencies
        with:
          os: ${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'macos' || 'linux') }}

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS=ON ..

      - name: Build
        shell: bash
        working-directory: ./build
        run: cmake --build . --config Debug

  test:
    name: Test (${{ matrix.os }})
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/composite-actions/install-dependencies
        with:
          os: ${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'macos' || 'linux') }}

      - name: Configure CMake
        shell: bash
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS=ON ..

      - name: Build
        shell: bash
        working-directory: ./build
        run: cmake --build . --config Debug

      - name: Run tests
        shell: bash
        working-directory: ./build
        run: ctest --output-on-failure